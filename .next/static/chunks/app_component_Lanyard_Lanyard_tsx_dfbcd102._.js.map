{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/sigit/project/portofolio/app/component/Lanyard/Lanyard.tsx"],"sourcesContent":["/* eslint-disable react/no-unknown-property */\n\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Canvas, extend, useFrame } from \"@react-three/fiber\";\nimport {\n  useGLTF,\n  useTexture,\n  Environment,\n  Lightformer,\n} from \"@react-three/drei\";\nimport {\n  BallCollider,\n  CuboidCollider,\n  Physics,\n  RigidBody,\n  useRopeJoint,\n  useSphericalJoint,\n  RigidBodyProps,\n} from \"@react-three/rapier\";\nimport { MeshLineGeometry, MeshLineMaterial } from \"meshline\";\nimport * as THREE from \"three\";\n\n// replace with your own imports, see the usage snippet for details\nconst cardGLB = \"/assets/lanyard/card.glb\";\nconst lanyard = \"/assets/lanyard/lanyard.png\";\n\nextend({ MeshLineGeometry, MeshLineMaterial });\n\ninterface LanyardProps {\n  position?: [number, number, number];\n  gravity?: [number, number, number];\n  fov?: number;\n  transparent?: boolean;\n}\n\nexport default function Lanyard({\n  position = [0, 0, 30],\n  gravity = [0, -40, 0],\n  fov = 20,\n  transparent = true,\n}: LanyardProps) {\n  return (\n    <div className=\"relative z-0 w-full h-screen flex justify-center items-center transform scale-100 origin-center\">\n      <Canvas\n        camera={{ position, fov }}\n        gl={{ alpha: transparent }}\n        onCreated={({ gl }) =>\n          gl.setClearColor(new THREE.Color(0x000000), transparent ? 0 : 1)\n        }\n      >\n        <ambientLight intensity={Math.PI} />\n        <Physics gravity={gravity} timeStep={1 / 60}>\n          <Band />\n        </Physics>\n        <Environment blur={0.75}>\n          <Lightformer\n            intensity={2}\n            color=\"white\"\n            position={[0, -1, 5]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={3}\n            color=\"white\"\n            position={[-1, -1, 1]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={3}\n            color=\"white\"\n            position={[1, 1, 1]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={10}\n            color=\"white\"\n            position={[-10, 0, 14]}\n            rotation={[0, Math.PI / 2, Math.PI / 3]}\n            scale={[100, 10, 1]}\n          />\n        </Environment>\n      </Canvas>\n    </div>\n  );\n}\n\ninterface BandProps {\n  maxSpeed?: number;\n  minSpeed?: number;\n}\n\nfunction Band({ maxSpeed = 50, minSpeed = 0 }: BandProps) {\n  // Using \"any\" for refs since the exact types depend on Rapier's internals\n  const band = useRef<any>(null);\n  const fixed = useRef<any>(null);\n  const j1 = useRef<any>(null);\n  const j2 = useRef<any>(null);\n  const j3 = useRef<any>(null);\n  const card = useRef<any>(null);\n\n  const vec = new THREE.Vector3();\n  const ang = new THREE.Vector3();\n  const rot = new THREE.Vector3();\n  const dir = new THREE.Vector3();\n\n  const segmentProps: any = {\n    type: \"dynamic\" as RigidBodyProps[\"type\"],\n    canSleep: true,\n    colliders: false,\n    angularDamping: 4,\n    linearDamping: 4,\n  };\n\n  const { nodes, materials } = useGLTF(cardGLB) as any;\n  const texture = useTexture(lanyard);\n  const [curve] = useState(\n    () =>\n      new THREE.CatmullRomCurve3([\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n      ])\n  );\n  const [dragged, drag] = useState<false | THREE.Vector3>(false);\n  const [hovered, hover] = useState(false);\n\n  const [isSmall, setIsSmall] = useState<boolean>(() => {\n    if (typeof window !== \"undefined\") {\n      return window.innerWidth < 1024;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const handleResize = (): void => {\n      setIsSmall(window.innerWidth < 1024);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return (): void => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1]);\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1]);\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1]);\n  useSphericalJoint(j3, card, [\n    [0, 0, 0],\n    [0, 1.45, 0],\n  ]);\n\n  useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = dragged ? \"grabbing\" : \"grab\";\n      return () => {\n        document.body.style.cursor = \"auto\";\n      };\n    }\n  }, [hovered, dragged]);\n\n  useFrame((state, delta) => {\n    if (dragged && typeof dragged !== \"boolean\") {\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera);\n      dir.copy(vec).sub(state.camera.position).normalize();\n      vec.add(dir.multiplyScalar(state.camera.position.length()));\n      [card, j1, j2, j3, fixed].forEach((ref) => ref.current?.wakeUp());\n      card.current?.setNextKinematicTranslation({\n        x: vec.x - dragged.x,\n        y: vec.y - dragged.y,\n        z: vec.z - dragged.z,\n      });\n    }\n    if (fixed.current) {\n      [j1, j2].forEach((ref) => {\n        if (!ref.current.lerped)\n          ref.current.lerped = new THREE.Vector3().copy(\n            ref.current.translation()\n          );\n        const clampedDistance = Math.max(\n          0.1,\n          Math.min(1, ref.current.lerped.distanceTo(ref.current.translation()))\n        );\n        ref.current.lerped.lerp(\n          ref.current.translation(),\n          delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed))\n        );\n      });\n      curve.points[0].copy(j3.current.translation());\n      curve.points[1].copy(j2.current.lerped);\n      curve.points[2].copy(j1.current.lerped);\n      curve.points[3].copy(fixed.current.translation());\n      band.current.geometry.setPoints(curve.getPoints(32));\n      ang.copy(card.current.angvel());\n      rot.copy(card.current.rotation());\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z });\n    }\n  });\n\n  curve.curveType = \"chordal\";\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n  return (\n    <>\n      <group position={[0, 4, 0]}>\n        <RigidBody\n          ref={fixed}\n          {...segmentProps}\n          type={\"fixed\" as RigidBodyProps[\"type\"]}\n        />\n        <RigidBody\n          position={[0.5, 0, 0]}\n          ref={j1}\n          {...segmentProps}\n          type={\"dynamic\" as RigidBodyProps[\"type\"]}\n        >\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody\n          position={[1, 0, 0]}\n          ref={j2}\n          {...segmentProps}\n          type={\"dynamic\" as RigidBodyProps[\"type\"]}\n        >\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody\n          position={[1.5, 0, 0]}\n          ref={j3}\n          {...segmentProps}\n          type={\"dynamic\" as RigidBodyProps[\"type\"]}\n        >\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody\n          position={[2, 0, 0]}\n          ref={card}\n          {...segmentProps}\n          type={\n            dragged\n              ? (\"kinematicPosition\" as RigidBodyProps[\"type\"])\n              : (\"dynamic\" as RigidBodyProps[\"type\"])\n          }\n        >\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\n          <group\n            scale={2.25}\n            position={[0, -1.2, -0.05]}\n            onPointerOver={() => hover(true)}\n            onPointerOut={() => hover(false)}\n            onPointerUp={(e: any) => {\n              e.target.releasePointerCapture(e.pointerId);\n              drag(false);\n            }}\n            onPointerDown={(e: any) => {\n              e.target.setPointerCapture(e.pointerId);\n              drag(\n                new THREE.Vector3()\n                  .copy(e.point)\n                  .sub(vec.copy(card.current.translation()))\n              );\n            }}\n          >\n            <mesh geometry={nodes.card.geometry}>\n              <meshPhysicalMaterial\n                map={materials.base.map}\n                map-anisotropy={16}\n                clearcoat={1}\n                clearcoatRoughness={0.15}\n                roughness={0.9}\n                metalness={0.8}\n              />\n            </mesh>\n            <mesh\n              geometry={nodes.clip.geometry}\n              material={materials.metal}\n              material-roughness={0.3}\n            />\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\n          </group>\n        </RigidBody>\n      </group>\n      <mesh ref={band}>\n        <meshLineGeometry />\n        <meshLineMaterial\n          color=\"white\"\n          depthTest={false}\n          resolution={isSmall ? [1000, 2000] : [1000, 1000]}\n          useMap\n          map={texture}\n          repeat={[-4, 1]}\n          lineWidth={1}\n        />\n      </mesh>\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}